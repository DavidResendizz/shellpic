#!/usr/bin/env python
# -*- coding: utf-8; mode: Python -*-
#
#
# Lars JÃ¸rgen Solberg <supersolberg@gmail.com> 2014
#

from __future__ import print_function
from __future__ import division
from __future__ import unicode_literals

import argparse
import sys
import io
import time

from PIL import Image

from shellpic import *

def main():    
    # parse command line parameters
    parser = argparse.ArgumentParser()
    parser.add_argument("image", help="Use '-' to read from STDIN")
    parser.add_argument("--version", action="version", version="Version: " + shellpic.VERSION,
                        help="Print verions number and exit.")

    parser.add_argument("--shell4", action="store_const", const=Shell4Bit, dest='formatter_class',
                        help="Print text suitable for a shell capable of displaying 16 colors")
    parser.add_argument("--shell8", action="store_const", const=Shell8Bit, dest='formatter_class',
                        help="Print text suitable for a shell capable of displaying 8bit colors (default)")
    parser.add_argument("--shell24", action="store_const", const=Shell24Bit, dest='formatter_class', 
                        help="Print text suitable for a shell capable of displaying 24bit colors")
    parser.add_argument("--irc", action="store_const", const=Irc, dest='formatter_class', 
                        help="Print text suitable for piping to an irc client")
    parser.add_argument("--nuts", action="store_const", const=Nuts, dest='formatter_class', 
                        help="Print text suitable for piping to a NUTS talker client")

    parser.add_argument("--no-scale", action="store_true",
                        help="Do not attempt to scale the image to fit the terminal")
    parser.add_argument("--scale-x", nargs=1, type=int,
                        help="Scale the image to this width")
    parser.add_argument("--scale-y", nargs=1, type=int,
                        help="Scale the image to this height")

    parser.add_argument("--animate", action="store_true", 
                        help="Animate the image once")
    parser.add_argument("--loop", action="store_true", 
                        help="Animate the image and loop indefinetly")
    args = parser.parse_args()    




    # create the right kind of 'Formatter'
    if args.formatter_class:
        formatter = args.formatter_class()
    else:
        formatter = Shell8Bit()

    dimensions = formatter.dimensions()

    # load the image
    if args.image == '-':
        # we need to copy the entire image to a buffer as PIL likes to seek()
        buf = io.StringIO()
        buf.write(sys.stdin.read())
        buf.seek(0)
        img = Image.open(buf)
        img.load() 
    else:
        try:
            img = Image.open(args.image)
        except IOError as excp:
            sys.stderr.write(str(excp) + '\n')
            exit(1)

    # grab what we need from the info-property, as some transformations might change them
    if 'background' in img.info:
        formatter.bgcolor = shellpic.ensure_rgb(img.palette, img.info['background'])
    if 'duration' in img.info:
        frame_delay = img.info['duration']
    else:
        frame_delay = 0

    # extract the frames for animation
    frames = [Frame(img)]
    if args.animate or args.loop:
        while True:
            try:
                img.seek(img.tell() + 1)
                frames.append(Frame(img))
            except EOFError:
                break

    # scale it to fit the terminal
    if not args.no_scale:
        if args.scale_x:
            dimensions = [args.scale_x[0], dimensions[1]]
        if args.scale_y:
            dimensions = [dimensions[0], args.scale_y[0]]
        
        for f in frames:
            f.scale(*dimensions)


    # print the image as an animation
    if args.animate or args.loop:
        try:
            delay = frame_delay / 1000
            while True:
                for frame in frames:
                    start = time.time()
                    if sys.version_info[0] == 3:
                        print(formatter.format(frame), end='')
                    else:
                        print(formatter.format(frame).encode('utf-8'), end='')
                    done = time.time()
                    time.sleep(max(0.0 , delay - (done - start)))
                if not args.loop:
                    print()
                    break
        except KeyboardInterrupt:
            if sys.version_info[0] == 3:
                print(formatter.format(frame))
            else:
                print(formatter.format(frame).encode('utf-8'))
            
        except NotImplementedError:
            sys.stderr.write('Animation is not implemented for ' + formatter.__class__.__name__ + '\n')
            exit(1)
    else:
        # or print the result to STDOUT        
        if sys.version_info[0] == 3:
            print(formatter.format(frames[0]))
        else:
            print(formatter.format(frames[0]).encode('utf-8'))


if __name__ == "__main__":
    main()
